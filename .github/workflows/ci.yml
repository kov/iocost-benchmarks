name: CI

on:
  workflow_dispatch:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

jobs:
  run:
    if: (github.event.issue.state == 'open') && !github.event.issue.locked
    name: Run CI scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout benchmarks repository
        uses: actions/checkout@v2

      - name: Download import-results binary
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: ${{ format('{0}-ci', github.repository) }}
          workflow: ci.yml
          branch: main

      - name: Set import-results binary permissions
        run: |
          chmod +x iocost-benchmarks-ci/import-results

      - name: Download resctl-demo binary
        uses: dawidd6/action-download-artifact@v2
        with:
          repo: ${{ format('{0}-ci', github.repository) }}
          workflow: build-resctl-demo.yml
          branch: main

      - name: Set resctl-demo permissions
        run: |
          chmod +x resctl-demo-v*/*

      - name: Smoketest resctl-demo
        run: |
          resctl-demo-v2.1/resctl-bench --version
          resctl-demo-v2.2/resctl-bench --version

      - name: Install PDF formatting dependencies and fix config
        run: |
          mkdir -p ~/.fonts/adobe-fonts
          git clone https://github.com/adobe-fonts/source-code-pro.git ~/.fonts/adobe-fonts/source-code-pro
          fc-cache -f -v ~/.fonts/adobe-fonts/source-code-pro
          sudo apt install inkscape ghostscript
          sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml

      - name: Run import-results
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: iocost-benchmarks-ci/import-results

      - name: Push to git
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          git push -f origin iocost-bot/${ISSUE_NUMBER}
          echo 'BRANCH_NAME<<EOF' >> $GITHUB_ENV
          echo iocost-bot/${ISSUE_NUMBER} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: PR title
        run: |
          echo 'PR_TITLE<<EOF' >> $GITHUB_ENV
          git log --pretty='format:%s%n' ${{ env.BRANCH_NAME }}^..${{ env.BRANCH_NAME }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: PR body
        run: |
          echo 'PR_BODY<<EOF' >> $GITHUB_ENV
          git log --pretty='format:%b%n' ${{ env.BRANCH_NAME }}^..${{ env.BRANCH_NAME }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Pull request
        run: |
          echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
          gh pr create --fill -B main -H ${{ env.BRANCH_NAME }}
